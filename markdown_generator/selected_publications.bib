%*******************************************
% ABBREVIATIONS FOR CONFERENCE PROCEEDINGS *
%*******************************************

@string{VTC = "Proc. IEEE Vehicular Technology Conference (VTC)"}
@string{CDC = "Proc. Control and Decision Conference (CDC)"}
@string{CCS = "Proc. ACM SIGSAC Conference on Computer and Communications Security (CCS)"}
@string{PIMRC = "Proc. PIMRC"}
@string{DATE = "Proc. DATE"}
@string{INFOCOM = "Proc. IEEE Int. Conference on Computer Communications (INFOCOM)"}
@string{IPSN = "Proc. IEEE/ACM IPSN"}
@string{ICNP = "Proc. IEEE ICNP"}
@string{ICN = "Proc. ACM ICN"}
@string{CONEXT = "Proc. ACM Int. Conference on emerging Networking EXperiments and Technologies (CoNEXT)"}
@string{MOBICOM = "Proc. ACM Int. Conference on Mobile Computing and Networking (MobiCom)"}
@string{WINTECH = "Proc. ACM WiNTECH"}
@string{SIGMETRICS = "Proc. ACM SIGMETRICS"}
@string{SIGCOMM = "Proc. ACM SIGCOMM"}
@string{SENSYS = "Proc. ACM SenSys"}
@string{MOBIHOC = "Proc. ACM MobiHoc"}
@string{MOBISYS = "Proc. ACM Int. Conference on Mobile Systems, Applications, and Services (MobiSys)"}
@string{DYSPAN = "Proc. IEEE DySPAN"}
@string{HOTNETS = "Proc. ACM HotNets"}
@string{HOTSDN = "Proc. ACM HotSDN"}
@string{EUROCRYPT = "Proc. Annual International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT)"}
@string{EUROSP = "Proc. IEEE European Symposium on Security and Privacy (EuroS\&P)"}

@string{ICC = "Proc. IEEE ICC"}
@string{PRIB = "Proc. PRIB"}
@string{WIOPT = "Proc. WiOPT"}
@string{SECON = "Proc. IEEE SECON"}
@string{OSDI = "Proc. OSDI"}
@string{WWW = "Proc. of the International Web Conference (WWW)"}
@string{NSDI = "Proc. USENIX Symposium on Networked Systems Design and Implementation (NSDI)"}
@string{USENIX = "Proc. USENIX"}
@string{USENIXSEC = "Proc. USENIX Security Symposium"}
@string{GLOBECOM = "Proc. GLOBECOM"}
@string{MILCOM = "Proc. MILCOM"}
@string{ITC = "Proc. Int. Teletraffic Congress (ITC)"}
@string{MOMUC = "Proc. Int. Workshop on Mobile Multimedia Communications (MoMuC)"}
@string{WCNC = "Proc. IEEE Wireless Communications and Networking Conference (WCNC)"}
@string{CISS="Proc. IEEE Conference on Information Sciences and Systems (CISS)"}
@string{ALLERTON="Proc. Annual Allerton Conference On Communication, Control and Computing"}
@string{IWQOS="Proc. IEEE Int. Workshop on Quality of Service (IWQoS)"}
@string{ISCC="Proc. Int. Symposium on Computer Communications (ISCC)"}
@string{PERCOM="Proc. IEEE Conference on Pervasive Computing and Communications (PerCom)"}
@string{OAKLAND="Proc. IEEE Symposium on Security and Privacy (S\&P)"}
@string{IMC="Proc. ACM Int. Measurement Conference (IMC)"}
@string{WICON="Proc. Int. Conference on Wireless Internet (WICON)"}
@string{ITA="Proc. Information Theory and Applications Workshop (ITA)"}
@string{ANCS="Proc. IEEE/ACM ANCS"}
@string{ICFP="Proc. ACM ICFP"}
@string{SANE="Proc. SANE"}
@string{GI="Proc. IEEE Global Internet Symposium (GI)"}
@string{NDSS="Proc. Network and Distributed System Security Symposium (NDSS)"}
@string{PAM="Proc. Passive and Active Measurement (PAM)"}
@string{DSN="Proc. IEEE/IFIP Int. Conference on Dependable Systems and Networks (DSN)"}
@string{TMA="Proc. Network Traffic Measurement and Analysis Conference (TMA)"}

%***********************************
% ABBREVIATIONS FOR JOURNAL PAPERS *
%***********************************

@string{JSAC="IEEE Journal on Selected Areas in Communications"}
@string{BALTZER="ACM Baltzer Journal of Wireless Networks"}
@string{TIT = "IEEE Transactions on Information Theory"}
@string{TON="IEEE/ACM Transactions on Networking"}
@string{TCOMM="IEEE Transactions on Communications"}
@string{TCOMP="IEEE Transactions on Computers"}
@string{SIAMCOMP="SIAM Journal of Computing"}
@string{TAC="IEEE Transactions on Automatic Control"}
@string{TMC="IEEE Transactions on Mobile Computing"}
@string{COMNET="Computer Networks"}
@string{TWC="IEEE Transactions on Wireless Communications"}
@string{COMLET="IEEE Communications Letters"}
@string{CCR="ACM SIGCOMM Computer Communication Review"}
@string{INET="IEEE Network"}

@inproceedings{zirngibl2021over9000,
    title        = {{It`s over 9000: Analyzing early QUIC Deployments with the Standardization on the Horizon}},
    author       = {Zirngibl, Johannes and Buschmann, Philippe and Sattler, Patrick and Jaeger, Benedikt and Aulbach, Juliane and Carle, Georg},
    url = {https://doi.org/10.1145/3487552.3487826},
    doi = {10.1145/3487552.3487826},
    year         = 2021,
    month        = 11,
    day          = 2,
    booktitle    = IMC,
    location     = {Virtual Event, USA},
    homepage = {https://quicimc.github.io/},
    data = {https://mediatum.ub.tum.de/1624408},
    file = {zirngibl2021over9000.pdf},
    abstract = {After nearly five years and 34 draft versions, standardization of the new connection oriented transport protocol QUIC was finalized in May 2021. Designed as a fundamental network protocol with increased complexity due to the combination of functionality from multiple network stack layers, it has the potential to drastically influence the Internet ecosystem. Nevertheless, even in its early stages, the protocol attracted a variety of parties including large providers. Our study shows, that more than 2.3 M IPv4 and 300k IPv6 addresses support QUIC hosting more than 30 M domains.Using our newly implemented stateful QUIC scanner (QScanner) we are able to successfully scan 26 M targets. We show that TLS as an integral part is similarly configured between QUIC and TLS over TCP stacks for the same target. In comparison, we identify 45 widely varying transport parameter configurations, e.g., with differences in the order of magnitudes for performance relevant parameters. Combining these configurations with HTTP Server header values and associated domains reveals two large edge deployments from Facebook and Google. Thus, while found QUIC deployments are located in 4667 autonomous systems, numerous of these are again operated by large providers.In our experience, IETF QUIC already sees an advanced deployment status mainly driven by large providers. We argue that the current deployment state and diversity of existing implementations and seen configurations solidifies the importance of QUIC as a future research topic. In this work, we provide and evaluate a versatile tool set, to identify QUIC capable hosts and their properties.Besides the stateful QScanner we present and analyze a newly implemented IPv4 and IPv6 ZMap module. We compare it to additional detection methods based on HTTP Alternative Service Header values from HTTP handshakes and DNS scans of the newly drafted HTTPS DNS resource record. While each method reveals unique deployments the latter would allow lightweight scans to detect QUIC capable targets but is drastically biased towards Cloudflare.},
}

@inproceedings{sattler2022privaterelay,
	title = {{Towards a Tectonic Traffic Shift? Investigating Apple's New Relay Network}},
	author = {Sattler, Patrick and Aulbach, Juliane and Zirngibl, Johannes and Carle, Georg},
	booktitle = IMC,
	year = {2022},
	location = {Nice, France},
    month = {October},
    day = {25},
    homepage = {https://relay-networks.github.io/},
    data = {https://mediatum.ub.tum.de/1687050},
    url = {https://doi.org/10.1145/3517745.3561426},
    doi = {10.1145/3517745.3561426},
    file = {sattler2022appleprivaterelay.pdf},
    abstract = {Apple recently published its first Beta of the iCloud Private Relay, a privacy protection service with promises resembling the ones of VPNs. The architecture consists of two layers (ingress and egress), operated by disjoint providers. The service is directly integrated into Apple's operating systems, providing a low entry-level barrier for a large user base. It seems to be set up for significant adoption with its relatively moderate entry-level price.This paper analyzes the iCloud Private Relay from a network perspective, its effect on the Internet, and future measurement-based research. We perform EDNS0 Client Subnet DNS queries to collect ingress relay addresses and find 1586 IPv4 addresses. Supplementary RIPE Atlas DNS measurements reveal 1575 IPv6 addresses. Knowing these addresses helps to detect clients communicating through the relay network passively. According to our scans, ingress addresses grew by 20% from January through April. Moreover, according to our RIPE Atlas DNS measurements, 5.3% of all probes use a resolver that blocks access to iCloud Private Relay.The analysis of our scans through the relay network verifies Apple's claim of rotating egress addresses. Nevertheless, it reveals that ingress and egress relays can be located in the same autonomous system, thus sharing similar routes, potentially allowing traffic correlation.},
}

@inproceedings{zirngibl2022rustyclusters,
	title = {{Rusty Clusters? Dusting an IPv6 Research Foundation}},
	author = {Zirngibl, Johannes and Steger, Lion and Sattler, Patrick and Gasser, Oliver and Carle, Georg},
	booktitle = IMC,
	year = {2022},
	location = {Nice, France},
    month = {October},
    day = {25},
    homepage = {https://ipv6hitlist.github.io/},
    data = {https://mediatum.ub.tum.de/1686542},
    file = {zirngibl2022rustyclusters.pdf},
    url = {https://doi.org/10.1145/3517745.3561440},
    doi = {10.1145/3517745.3561440},
    abstract = {The long-running IPv6 Hitlist service is an important foundation for IPv6 measurement studies. It helps to overcome infeasible, complete address space scans by collecting valuable, unbiased IPv6 address candidates and regularly testing their responsiveness. However, the Internet itself is a quickly changing ecosystem that can affect long-running services, potentially inducing biases and obscurities into ongoing data collection means. Frequent analyses but also updates are necessary to enable a valuable service to the community.In this paper, we show that the existing hitlist is highly impacted by the Great Firewall of China, and we offer a cleaned view on the development of responsive addresses. While the accumulated input shows an increasing bias towards some networks, the cleaned set of responsive addresses is well distributed and shows a steady increase.Although it is a best practice to remove aliased prefixes from IPv6 hitlists, we show that this also removes major content delivery networks. More than 98% of all IPv6 addresses announced by Fastly were labeled as aliased and Cloudflare prefixes hosting more than 10 M domains were excluded. Depending on the hitlist usage, e.g., higher layer protocol scans, inclusion of addresses from these providers can be valuable.Lastly, we evaluate different new address candidate sources, including target generation algorithms to improve the coverage of the current IPv6 Hitlist. We show that a combination of different methodologies is able to identify 5.6 M new, responsive addresses. This accounts for an increase by 174% and combined with the current IPv6 Hitlist, we identify 8.8 M responsive addresses.},
}

@inproceedings{zirngibl2024quichunter,
  author = {Johannes Zirngibl and Florian Gebauer and Patrick Sattler and Markus Sosnowski and Georg Carle},
  title = {{QUIC Hunter: Finding QUIC Deployments and Identifying Server Libraries Across the Internet}},
  booktitle = PAM,
  year = {2024},
  month = {March},
  day={11},
  doi = {10.1007/978-3-031-56252-5_13},
  url = {https://doi.org/10.1007/978-3-031-56252-5_13},
  abstract = {The diversity of QUIC implementations poses challenges for Internet measurements and the analysis of the QUIC ecosystem. While all implementations follow the same specification and there is general interoperability differences in performance, functionality, but also security (e.g., due to bugs) can be expected. Therefore, knowledge about the implementation of an endpoint on the Internet can help researchers, operators, and users to better analyze connections, performance, and security. In this work, we improved the detection rate of QUIC scans to find more deployments and provide an approach to effectively identify QUIC server libraries based on CONNECTION_CLOSE frames and transport parameter orders. We performed Internet-wide scans and identified at least one deployment for 18 QUIC libraries. In total, we can identify the libraries with 8.0M IPv4 and 2.5M IPv6 addresses. We provide a comprehensive view of the landscape of competing QUIC libraries.},
  homepage = {https://github.com/quic-hunter/libraries}, 
}

@journal{kempf2025quicpacing,
  title = {{QUIC Steps: Evaluating Pacing Strategies in QUIC Implementations}},
  author = {Kempf, Marcel and Tietz, Simon and Jaeger, Benedikt and Sp{\"a}th, Johannes and Carle, Georg and Zirngibl, Johannes},
  year = {2025},
  doi = {10.1145/3730985},
  journal = {Proc. ACM Netw.},
  month = jun,
  file = {kempf2025quicpacing.pdf},
  homepage = {https://github.com/tumi8/quic-pacing-paper},
  abstract = {Pacing is a key mechanism in modern transport protocols, used to regulate packet transmission timing to 
minimize traffic burstiness, lower latency, and reduce packet loss. Standardized in 2021, QUIC is a UDP-based
protocol designed to improve upon the TCP / TLS stack. While the QUIC protocol recommends pacing, and
congestion control algorithms like BBR rely on it, the user-space nature of QUIC introduces unique challenges.
These challenges include coarse-grained timers, system call overhead, and OS scheduling delays, all of which
complicate precise packet pacing.
This paper investigates how pacing is implemented differently across QUIC stacks, including quiche,
picoquic, and ngtcp2, and evaluates the impact of system-level features like GSO and Linux qdiscs on pacing.
Using a custom measurement framework and a passive optical fiber tap, we establish a baseline with default
settings and systematically explore the effects of qdiscs, hardware offloading using the ETF qdisc, and GSO on
pacing precision and network performance. We also extend and evaluate a kernel patch to enable pacing of
individual packets within GSO buffers, combining batching efficiency with precise pacing. Kernel-assisted and
purely user-space pacing approaches are compared. We show that pacing with only user-space timers can
work well, as demonstrated by picoquic with BBR.
With quiche, we identify FQ as a qdisc well-suited for pacing QUIC traffic, as it is relatively easy to use and
offers precise pacing based on packet timestamps. We uncovered that internal mechanisms, such as a library’s
spurious loss detection logic or algorithms such as HyStart++, can interfere with pacing and cause issues like
unstable congestion windows and increased packet loss. Our findings provide new insights into the trade-offs
involved in implementing pacing in QUIC and highlight potential optimizations for real-world applications
like video streaming and video calls.},
}

@journal{sattler2025ecsplorer,
  author = {Sattler, Patrick and Zirngibl, Johannes and Hilal, Fahad and Gasser, Oliver and Vermeulten, Kevin and Carle, Georg and Jonker, Mattijs},
  title = {{ECSeptional DNS Data: Evaluating Nameserver ECS Deployments with Response-Aware Scanning}},
  year = {2025},
  doi = {10.1145/3730977},
  journal = {Proc. ACM Netw.},
  month = jun,
  file = {sattler2025ecsplorer.pdf},
  homepage = {https://github.com/tumi8/ECSplorer},
  abstract = {DNS is one of the cornerstones of the Internet. Nowadays, a substantial fraction of DNS queries are handled by
public resolvers (e.g., Google Public DNS and Cisco’s OpenDNS) rather than ISP nameservers. This behavior
makes it difficult for authoritative nameservers to provide answers based on the requesting resolver. The
impact is especially important for entities that make client origin inferences to perform DNS-based load
balancing (e.g., CDNS). The EDNS0 Client Subnet (ECS) option adds the client’s IP prefix to DNS queries, which
allows authoritative nameservers to provide prefix-based responses. Previous work showed the potential of
data collected during ECS scans. Infrastructure can be uncovered, and operators’ subnet-specific behavior can
be observed.
In this study, we introduce a new method for conducting ECS scans. Our method significantly reduces the
required number of queries by up to 97 % compared to state-of-the-art techniques and allows us to provide new
insights into ECS behavior. Our approach is also the first to facilitate ECS scans for IPv6. Due to its vast address
space, we have developed and analyzed different IPv6 scanning approaches. We conduct a comprehensive
evaluation of the ECS landscape, examining the usage and implementation of ECS across various services.
Overall, 53 % of all nameservers support prefix-based responses. Furthermore, we find that Google nameservers
do not comply with the Google Public DNS guidelines. Additionally, we observe that certain operators (e.g.,
AWS Route53) exclusively employ a single specific scope prefix length without aggregation, potentially
affecting resolver cache efficiency. Lastly, we make our tool and data publicly available to foster further
research in the area.},
}

@inproceedings{sattler2025happyeyeballs,
  title = {{Lazy Eye Inspection: Capturing the State of Happy Eyeballs Implementations}},
  author = {Sattler, Patrick and Kirstein, Matthias and Wüstrich, Lars and Zirngibl, Johannes and Carle, Georg},
  booktitle = IMC,
  year = {2025},
  month = oct,
  file = {sattler2025happyeyeballs.pdf},
  doi = {10.1145/3730567.3732925},
  homepage = {https://www.happy-eyeballs.net/},
  abstract = {While transitioning to an IPv6-only communication, many devices settled on a dual-stack setup. IPv4 and IPv6 are available to these hosts for new connections. Happy Eyeballs (HE) describes a mechanism to prefer IPv6 for such hosts while ensuring a fast fallback to IPv4 when IPv6 fails. The IETF is currently working on the third version of HE. While the standards include recommendations for HE parameter choices, it is up to the client and OS to implement HE. In this paper, we investigate the state of HE in various clients, particularly web browsers and recursive resolvers. We introduce a framework to analyze and measure clients' HE implementations and parameter choices. According to our evaluation, only Safari supports all HE features. Safari is also the only client implementation in our study that uses a dynamic IPv4 connection attempt delay, a resolution delay, and interlaces addresses. We further show that problems with the DNS A record lookup can even delay and interrupt the network connectivity despite a fully functional IPv6 setup with Chrome and Firefox. We operate a publicly available website (www.happy-eyeballs.net) which measures the browser's HE behavior, and we publish our testbed measurement framework.}
}